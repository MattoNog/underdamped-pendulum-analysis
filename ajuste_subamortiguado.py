# -*- coding: utf-8 -*-
"""Ajuste subamortiguado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10-bJPrjR3dQZspzi43p4jCG1ebIfgS4M
"""

import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit
from sklearn.linear_model import LinearRegression
import scipy.stats as stats

import io

"""LINK OF COLAB: https://colab.research.google.com/drive/10-bJPrjR3dQZspzi43p4jCG1ebIfgS4M?usp=sharing

Importar desde PC
"""

from google.colab import files
uploaded = files.upload()

"""Defino funciones a ajustar"""

def exp(x, A, B, C):
  return A*(np.exp(B*x))+ C

"""Grafico una cola y dos colas"""

sub = pd.read_csv('sub.csv')
x_sub = sub['x']
y_sub   = sub['y']

doble = pd.read_csv('doble.csv')
x_doble = doble['x']
y_doble	= doble['y']

plt.figure(figsize=(15,4))
plt.plot(x_sub, y_sub, "o--")
plt.ylabel(r'V', fontsize=15)
plt.xlabel(r't', fontsize=15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

plt.figure(figsize=(15,4))
plt.plot(x_doble, y_doble, "o--")
plt.ylabel(r'V', fontsize=15)
plt.xlabel(r't', fontsize=15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

"""Ajusto sub"""

sub = pd.read_csv('sub.csv')
x_sub_max = sub['A']
y_sub_max	= sub['B']
y_sub_max_err	= sub['C']

plt.figure(figsize=(15,4))
plt.plot(x_sub_max, y_sub_max, "o--")
plt.ylabel(r'V', fontsize=15)
plt.xlabel(r't', fontsize=15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

x_sub_max_0 = x_sub_max[:19]
y_sub_max_0 = y_sub_max[:19]
y_sub_max_0_err = y_sub_max_err[:19]

init_guess = [1, 1, 7]
param, param_cov = curve_fit(exp, x_sub_max_0, y_sub_max_0, p0=init_guess)


print(param)
print(param_cov)

perr = np.sqrt(np.diag(param_cov))

x = np.linspace(min(x_sub_max_0), max(x_sub_max_0), 1000)

plt.figure(figsize=(15,4))
plt.errorbar(x_sub_max_0, y_sub_max_0,  c='r', label = "Data", fmt='o',  ecolor='grey', capsize=2, markersize = 7, elinewidth = 2,)
plt.plot(x, exp(x, param[0], param[1], param[2]), label = 'Ajuste')
plt.ylabel(r'V', fontsize=15)
plt.xlabel(r't', fontsize=15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

puntos = len(x_sub_max_0)
parametros_chi = len(param)
y_modelo = exp(x_sub_max_0, param[0], param[1], param[2])
y = y_sub_max_0
yerr = y_sub_max_0_err

chi_cuadrado = np.sum(((y-y_modelo)/yerr)**2)
p_chi = stats.chi2.sf(chi_cuadrado, puntos - 1 - parametros_chi)
chi_cuadrado_redux = chi_cuadrado/4

print('chi^2: ' + str(chi_cuadrado))
print('p-valor del chi^2: ' + str(p_chi))
print('chi^2 reducido: ' + str(chi_cuadrado_redux))
if yerr[0]==0:
    print('No se declararon errores en la variable y.')
elif p_chi<0.05:
    print('Se rechaza la hipótesis de que el modelo ajuste a los datos.')
else:
    print('No se puede rechazar la hipótesis de que el modelo ajuste a los datos.')

plt.figure(figsize=(15,4))
x = np.linspace(min(x_sub_max_0), max(x_sub_max_0), 1000)

plt.errorbar(x_sub_max_0, y_sub_max_0-exp(x_sub_max_0, param[0], param[1], param[2]), fmt='o', markersize = 7, label = 'Residuo')
plt.axhline(y = 0, color = 'r', linestyle = '--', label = 'y=0')

plt.ylabel(r'$V$', fontsize=15)
plt.xlabel(r'$t$', fontsize=15)

plt.xticks(np.arange(min(x_sub_max_0), max(x_sub_max_0), 1000))
plt.minorticks_on()
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.legend(fontsize = 13)
plt.show()

G_r = 700 #50, 100, 150, 200, 300, 400, 500, 600, 700, hay que elegir que grafico ver

if G_r == 50:
  GR = "50.csv"
elif G_r == 100:
  GR = "100.csv"
elif G_r == 150:
  GR = "150.csv"
elif G_r == 2020:
  GR = "200.csv"
elif G_r == 300:
   GR = "300.csv"
elif G_r == 400:
  GR = "400.csv"
elif G_r == 500:
  GR = "500.csv"
elif G_r == 600:
  GR = "600.csv"
elif G_r == 700:
  GR = "700.csv"

s_R = pd.read_csv(GR)
x_R = s_R['x']
y_R	= s_R['y']

plt.figure(figsize=(15,4))
plt.plot(x_R, y_R, "o--")
plt.ylabel(r'V', fontsize=15)
plt.xlabel(r't', fontsize=15)
plt.legend(fontsize = 13)
plt.grid(linestyle='--')
plt.grid(which = 'minor',linestyle=':', linewidth='0.1', color='black' )
plt.plot

